// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Media;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The properties of a storage account associated with this resource.
    /// </summary>
    public partial class StorageAccount
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccount class.
        /// </summary>
        public StorageAccount()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccount class.
        /// </summary>
        /// <param name="id">The id of the storage account resource. Media
        /// Services relies on tables and queues as well as blobs, so the
        /// primary storage account must be a Standard Storage account (either
        /// Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage
        /// accounts can be added as secondary storage accounts (isPrimary
        /// false).</param>
        /// <param name="isPrimary">Is this storage account resource the
        /// primary storage account for the Media Service resource. Blob only
        /// storage must set this to false.</param>
        public StorageAccount(string id, bool isPrimary)
        {
            Id = id;
            IsPrimary = isPrimary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the id of the storage account resource. Media Services
        /// relies on tables and queues as well as blobs, so the primary
        /// storage account must be a Standard Storage account (either
        /// Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage
        /// accounts can be added as secondary storage accounts (isPrimary
        /// false).
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets is this storage account resource the primary storage
        /// account for the Media Service resource. Blob only storage must set
        /// this to false.
        /// </summary>
        [JsonProperty(PropertyName = "isPrimary")]
        public bool IsPrimary { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
