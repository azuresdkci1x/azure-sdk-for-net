// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BatchManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApplicationPackageOperations.
    /// </summary>
    public static partial class ApplicationPackageOperationsExtensions
    {
            /// <summary>
            /// Activates the specified application package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The ID of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application to activate.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for the request.
            /// </param>
            public static void Activate(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, ActivateApplicationPackageParameters parameters)
            {
                operations.ActivateAsync(resourceGroupName, accountName, applicationId, version, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activates the specified application package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The ID of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application to activate.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for the request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, ActivateApplicationPackageParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivateWithHttpMessagesAsync(resourceGroupName, accountName, applicationId, version, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates an application package record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The ID of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application.
            /// </param>
            public static ApplicationPackage Create(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
            {
                return operations.CreateAsync(resourceGroupName, accountName, applicationId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an application package record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The ID of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationPackage> CreateAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, applicationId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an application package record and its associated binary file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The ID of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application to delete.
            /// </param>
            public static void Delete(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
            {
                operations.DeleteAsync(resourceGroupName, accountName, applicationId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an application package record and its associated binary file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The ID of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, applicationId, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets information about the specified application package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The ID of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application.
            /// </param>
            public static ApplicationPackage Get(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version)
            {
                return operations.GetAsync(resourceGroupName, accountName, applicationId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified application package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='applicationId'>
            /// The ID of the application.
            /// </param>
            /// <param name='version'>
            /// The version of the application.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationPackage> GetAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, applicationId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
